{"/about/":{"data":{"":"This is the about page."},"title":"About"},"/docs/":{"data":{"":"Trayce is a Git-friendly, offline-first, open-source API client and Docker network-monitor. It is born out of frustration with existing API clients which are all based on Electron, Tauri or other frameworks which use a web browser to render the user interface.","collection-format#Collection Format":"Trayce collections follow the bru-lang format and therefore are interoperable with the Bruno API client. You can open a Bruno collection with Trayce, and you can open a Trayce collection with Bruno. They are one and the same.","docker-network-monitor#Docker Network Monitor":"The Docker network monitor lets you see what requests are being made to, from and in-between your Docker containers. It differs from other developer proxy tools like Fiddler, HttpToolkit and Requestly in that it does not require the use of a proxy or setting up CA certificates to intercept TLS-encrypted messages. Instead it uses eBPF to intercept system calls at the kernel layer and propogates this information to the GUI."},"title":"Docs"},"/docs/getting-started/":{"data":{"":"Explore the following sections to get started using Trayce:\nInstall Create a collection Create a folder Create a request"},"title":"Getting Started"},"/docs/getting-started/create-collection/":{"data":{"":"A collection in Trayce is a structured group of API requests, tests, and related resources that helps you organize and manage your API testing workflow.","how-to-create-a-collection#How to Create a Collection":"Open Trayce Click on the ... button and select Create Collection from the dropdown (or click “New Collection” below the Trayce logo) Enter a name for your collection Choose a location on your filesystem to store the collection Click Create Congratulations! You have successfully created your first collection."},"title":"Create a Collection"},"/docs/getting-started/create-folder/":{"data":{"":"Trayce helps you organize your API requests efficiently by grouping them into folders. You can create a structured hierarchy that matches your API’s organization, making it easier to manage and navigate your collections.","how-to-create-a-folder#How to Create a Folder":"Right-click your collection from the file explorer Select New Folder from the menu Type a name for your folder and hit Enter"},"title":"Create a Folder"},"/docs/getting-started/create-request/":{"data":{"":"A request is the primary object in Trayce. Let’s walk through how to create your first request:","how-to-create-a-request#How to Create a Request":"Right-click your collection from the file explorer Select New Request from the menu (or press Ctrl+N on your keyboard) Type a name for your request and hit Enter You have successfully created your first request in Trayce! Feel free to add headers, query parameters, and a request body to your request, or play around with the other options available."},"title":"Create a Request"},"/docs/getting-started/install/":{"data":{"":"Trayce is a free and open-source, fast and lightweight API client for exploring and testing APIs. It’s designed to be a modern alternative to slow, browser-based API clients with a focus on speed, simplicity, and collaboration.","download#Download":"Download Trayce from here.","install#Install":"Trayce can currently only be installed by downloading a packaged installer and opening it on your machine. Package manager distribution is not yet available.\nmaclinuxwindows Download the .dmg installer from our releases page on GitHub. Open it and drag the Trayce icon to your Applications folder. On Debian-based distros you can download the .deb installer and install that from the command line by running:\nsudo dpkg -i trayce.deb For other distros you will have to follow the README.md to build Trayce from source.\nThe Windows version of Trayce is not yet available, sorry!","release-information#Release Information":"Trayce follows semantic versioning. You can check the GitHub releases page for:\nLatest version information Release notes Bug fixes New features included in each release"},"title":"Download \u0026 Install"},"/docs/scripting/":{"data":{"":"Welcome to getting started!"},"title":"Scripting"},"/docs/scripting/execution-flow/":{"data":{"":"Welcome to getting started!"},"title":"Execution Flow"},"/docs/scripting/js-file/":{"data":{"":"Welcome to getting started!"},"title":"Javascript File"},"/docs/scripting/js-reference/":{"data":{"":"Welcome to getting started!"},"title":"Javascript Reference"},"/docs/scripting/npm-packages/":{"data":{"":"Welcome to getting started!"},"title":"NPM Packages"},"/docs/scripting/random-values/":{"data":{"":"Welcome to getting started!"},"title":"Random Values"},"/docs/scripting/response-query/":{"data":{"":"Welcome to getting started!"},"title":"Response Query"},"/docs/scripting/sync-requests/":{"data":{"":"Welcome to getting started!"},"title":"Synchronous Requests"},"/docs/scripting/variables/":{"data":{"":"Welcome to getting started!"},"title":"Variables"},"/docs/sending-requests/":{"data":{"":"","http#HTTP":"Explore the following sections to send HTTP requests using Trayce:\nHTTP Overview Parameters Headers Body"},"title":"Sending Requests"},"/docs/sending-requests/graphql/":{"data":{"":"HTTP (Hypertext Transfer Protocol) is the foundational protocol that powers the World Wide Web, enabling communication between web browsers and servers. It operates as a request-response protocol where clients (like web browsers) send HTTP requests to servers, which then respond with the requested resources such as HTML pages, images, JSON, or data.\nHTTP is stateless, meaning each request is independent and doesn’t retain information from previous interactions, though mechanisms like cookies and sessions can maintain state when needed."},"title":"GraphQL"},"/docs/sending-requests/graphql/query/":{"data":{"":"The GraphQL feature has not been finished yet, check the GitHub releases page for updates, or subscribe to version updates by entering your email here."},"title":"GraphQL Query"},"/docs/sending-requests/graphql/variables/":{"data":{"":"The GraphQL feature has not been finished yet, check the GitHub releases page for updates, or subscribe to version updates by entering your email here."},"title":"GraphQL Variables"},"/docs/sending-requests/http/":{"data":{"":"HTTP (Hypertext Transfer Protocol) is the foundational protocol that powers the World Wide Web, enabling communication between web browsers and servers. It operates as a request-response protocol where clients (like web browsers) send HTTP requests to servers, which then respond with the requested resources such as HTML pages, images, json, or data.\nHTTP is stateless, meaning each request is independent and doesn’t retain information from previous interactions, though mechanisms like cookies and sessions can maintain state when needed."},"title":"HTTP"},"/docs/sending-requests/http/body/":{"data":{"":"The Body tab allows you to send specific data with your API requests. You can choose from various data formats, such as Form, Raw, and others, using the dropdown menu.","1-text-based-data#1. Text-Based Data":"Text-based data allows you to send data in its raw, unprocessed form in the body of an API request. It doesn’t require a predefined structure like key-value pairs or multi-part boundaries. Instead, you can send data exactly as it is, which is useful when dealing with structured data formats such as JSON, XML or plain text.\nNavigate to the Body tab. Select your preferred data format (i.e. JSON). Add appropriate data for your API request. Save and execute the request.","2-form-data#2. Form Data":"Multipart Form\nMultipart form data is used for sending files along with form data, allowing multiple parts with different content types in a single request. In multipart form data, each part of the request is separated by a boundary.\nNavigate to the Body tab. Select Multipart Form from dropdown. Click on Add File and upload your file. Save and execute the request. URL-Encoded Form\nURL-Encoded form data is commonly used for simple form submissions where data is sent as key-value pairs. Each key and value are separated by an equal sign (=), and multiple pairs are separated by an ampersand (\u0026).\nNavigate to the Body tab. Select Form URL Encoded from dropdown. Click on Add Param and add key-value pair. Save and execute the request.","3-file-data#3. File Data":"File data allows you to upload and send files directly in the body of your API request. This is commonly used for uploading documents, images, or any binary data to endpoints that accept file uploads. The file is sent as raw binary data in the request body.\nNavigate to the Body tab. Select File from dropdown. Click Browse to upload a file. Click the file’s radio button to select it to be sent Save and execute the request.","how-send-api-requests-with-a-body#How Send API Requests with a Body":"You can select the data type based on your API request requirements. For example, if you’re working with a request where you need to send specific details about a particular item, you’ll likely choose JSON as the data type and include the data in the body of the request."},"title":"Body"},"/docs/sending-requests/http/headers/":{"data":{"":"Request headers are key-value pairs sent along with an HTTP request to provide additional information to the server about the request. The request headers give the server more information about how to process the incoming request.\nDefault Headers: Default headers are predefined headers that are part of the HTTP specification.\nCustom Headers: Custom headers are headers that are user-defined and are not part of the official HTTP specification.","how-to-add-request-headers#How to Add Request Headers":"Create a request Navigate to the Headers tab Enter the Name of the header and its corresponding Value."},"title":"Headers"},"/docs/sending-requests/http/parameters/":{"data":{"":"Trayce enables you to send data with your HTTP requests. You can include both query and path parameters in the request and define their corresponding values.\nQuery Parameters Path Parameters","how-path-parameters-work#How Path Parameters Work":"Path parameters are embedded directly in the URL path. They are represented as placeholders preceded by a colon (:). When making the request, the placeholder is replaced with a dynamic value, which is part of the URL. Example:\nhttps://api.example.com/users/:id :id is a path parameter.","how-query-parameters-work#How Query Parameters Work":"Query parameters are appended to the end of the URL after a ? symbol Each parameter consists of a key-value pair If there are multiple query parameters, they are separated by an \u0026 symbol","how-to-add-path-parameters#How to Add Path Parameters":"Create a request Navigate to the Params tab Add the path parameter variable in the URL. e.g. /users/:user Enter the value in the path parameter section for the corresponding variable.","how-to-add-query-parameters#How to Add Query Parameters":"Create a request Navigate to the Params tab Enter the Name of the parameter and its corresponding Value You’ll notice that the values are appended to the URL, starting with a ?.","path-parameters#Path Parameters":"A path parameter is a dynamic value embedded directly in the URL path of an API request. It is used to specify particular resources or data points within an API endpoint.","query-parameters#Query Parameters":"Query parameters are a way to pass additional information to a server via the URL when making an HTTP request. They are commonly used in GET requests to filter, sort, or specify the data you’re asking for."},"title":"Parameters"},"/docs/variables/":{"data":{"":"Variables allow you to store dynamic values that can be reused across multiple API requests, environments, and workflows. This feature enhances flexibility, maintainability, and efficiency by enabling you to manage frequently changing data points such as tokens, environment-specific URLs, or user-defined values in one place.","debugging-variables-in-scripts#Debugging Variables in Scripts":"You can access and debug variables in the console using the following pattern:\nThe pattern follows bru.get[Type]Var(key) where:\n[Type] is the variable type (Runtime, Request, Folder, etc.) key is the variable name you want to access","example#Example:":"// Basic syntax: console.log(bru.get[Type]Var(key)) console.log(bru.getVar('myVar')) // Runtime variables","scripting-api#Scripting API":"Please see the Scripting API for more information on how to access variables in your scripts.","types#Types":"There are 6 types of variables you can create:\nGlobal Environments Variables Environment Variables Collection Variables Folder Variables Request Variables Runtime Variables Additionally, Process Environment Variables can be defined in an external environment configuration file:\nProcess Environment Variables","variable-data-type#Variable Data Type":"All variables are stored as strings. Trayce does not infer or change the data type of the variable based on the value you set.","variable-precedence-and-scope#Variable Precedence and Scope":"When a variable is accessed, the following precedence is used to determine which value is used:","variable-storage#Variable Storage":"Each variable has its own storage location either within your collection file or within the app’s memory. All storage is local."},"title":"Variables"},"/docs/variables/collection-variables/":{"data":{"":"Collection variables are variables that are scoped to a specific collection. They are useful for storing variables that are used across multiple requests in a collection.\nHow to Add a Collection Variable Go to Collection Settings Go to the Variables tab Add your variable name, value in the Pre Request Vars section Save your changes Using a Collection Variable You can use the {{varName}} syntax to use a collection variable in a request.","access-collection-variable-inside-scripts#Access Collection Variable inside scripts":"You can also use the bru.getCollectionVar() function to get the value of a runtime variable and use it inside your pre request scripts.\nlet namespace = bru.getCollectionVar(\"posts_path\");","how-to-add-a-collection-variable#How to Add a Collection Variable":"","using-a-collection-variable#Using a Collection Variable":""},"title":"Collection Variables"},"/docs/variables/environment-variables/":{"data":{"how-to-add-an-environment-variable#How to Add an Environment Variable":"Environment variables are variables that are scoped to an environment, such as local development or production. They are useful for storing variables that can be re-used across the collection that are different depending on the environment. An example would be the host url of the server you want to test.\nHow to Add an Environment Variable Go to environments (top right) and press configure. If there are no environments, you will be prompted to create one. Add your variable name and value for the specific environment. Save your changes. Select the environment from the dropdown:","using-an-environment-variable#Using an Environment Variable":"Just like other variables you can use the {{varName}} syntax to use an environment variable in a request. On the top-right, you can see which environment you are currently using and select a different one.","using-the-environment-directory#Using the ./environment Directory":"Environment variables are synced with the /environments directory inside your collection. You can also create and manage environments there.\nEach environment is saved in a .bru file, which looks like this:\nvars { host: http://localhost:8787 } vars:secret [ my_password ]"},"title":"Environment Variables"},"/docs/variables/folder-variables/":{"data":{"":"Folder variables are variables that are scoped to a specific folder. They are useful for storing variables that are used across multiple requests in a folder.\nHow to Add a Folder Variable Go to Folder Settings Go to Vars Tab Add your variable name, value in the Pre Request Vars section Save your changes Using a Folder Variable You can use the {{varName}} syntax to use a folder variable in a request.","access-folder-variable-inside-scripts#Access Folder Variable inside scripts":"You can also use the bru.getFolderVar() function to get the value of a folder variable and use it inside your scripts.\nlet bearerToken = bru.getFolderVar(\"username\");","how-to-add-a-folder-variable#How to Add a Folder Variable":"","using-a-folder-variable#Using a Folder Variable":""},"title":"Folder Variables"},"/docs/variables/global-environment-variables/":{"data":{"":"Global variables are stored in the application’s memory. You can access them by visiting the About section from Settings and navigating to the AppData path location. Global environment variables can be used across all collections and requests. Think of them as a global store accessible throughout the app.\nInstead of creating the same collection variable repeatedly in each collection, you can use global variables to store common values that need to be accessed across different collections. This eliminates the repetitive task of defining the same variables every time.","how-to-add-a-global-environment-variable#How to Add a Global Environment Variable":"Click the Global Environments icon (top right corner) and click Configure. Click New Environment. Click the edit icon next to the environments name, enter your name and hit enter. Add variables by typing their name and value: Your global environment variable is now created and can be accessed across your workspace.\nYou can click the secret checkbox to hide the values of variables while hovering over them.","how-to-use-global-environment-variables#How to use Global Environment Variables":"To use a global environment variable, reference it using the format {{var_name}} in any request or collection. These variables can be combined with other variables and used throughout your workspace, making them ideal for consistent value sharing."},"title":"Global Environment Variables"},"/docs/variables/process-environment-variables/":{"data":{"":"Process environment variables are used to store sensitive information, such as API keys, passwords, and other secret values. These values are stored in a .env file.\nYou must create the .env file in your local project directory (e.g., using VS Code) to store your process environment variables. Trayce cannot create or manage the .env file for you.","creating-a-process-environment-variables#Creating a Process Environment Variables":"To create process environment variables, you can add a .env file to the root of your collection. This file will store your secrets, which can then be accessed throughout the collection.","example#Example":"In your collection, the structure might look like this:\napi-folder customer-api emp-api details.bru lib.js .gitignore bruno.json package.json .env In the .env file, you would store a key-value pair, like this:\nkey = 1232abcd","using-the-process-environment-variables#Using the Process Environment Variables":"To access the values stored in the .env file, you can use the process.env global object. For example, if you want to retrieve the key value from your .env file, you would use:\nYou can use process.env. throughout your collection to securely manage and access your environment variables."},"title":"Process Environment Variables"},"/docs/variables/request-variables/":{"data":{"":"Request variables are variables that are scoped to a specific request. They are useful for storing variables that is used in a specific request.\nHow to Add a Request Variable Go to the Request Go to Vars Tab Add your variable name, value in the Pre Request Vars section Save your changes Using a Request Variable You can use the {{varName}} syntax to use a request variable in a request.","access-request-variable-inside-scripts#Access Request Variable inside scripts":"You can also use the bru.getRequestVar() function to get the value of a request variable and use it inside your scripts.\nlet source = bru.getRequestVar(\"source\"); let destination = bru.getRequestVar(\"destination\");","how-to-add-a-request-variable#How to Add a Request Variable":"","using-a-request-variable#Using a Request Variable":""},"title":"Request Variables"},"/docs/variables/runtime-variables/":{"data":{"":"Runtime variables are ephemeral variables that exist only during the runtime of the API client. These variables are scoped within a collection, meaning they are accessible to all requests within that collection. However, once the API client is closed or restarted, the values of these variables are lost. They are ideal for managing temporary data such as session tokens, dynamic parameters, or other values that are generated or updated during the execution of requests.","example#Example:":"Suppose you receive an authentication token as part of a response body and want to reuse it in subsequent requests. You can capture it using the bru.setVar() function in your post response script.\nbru.setVar(\"token\", res.body.token);","example-1#Example:":"If you’ve stored a token variable using bru.setVar(), you can use it in headers, query parameters, body, or URL of subsequent requests like this:\nAuthorization: Bearer {{token}} You can also use the bru.getVar() function to get the value of a runtime variable and use it inside your pre request scripts.\nconst token = bru.getVar(\"token\"); req.setHeader(\"Authorization\", `Bearer ${token}`);","example-2#Example:":"Consider the following script inside Trayce, which creates a runtime variable with a key and value pair. In this case, the key is hey and the value is Trayce.\nbru.setVar(\"hey\", \"Trayce\"); Once the request is executed, the runtime variable will be available for viewing. Click the eye icon in the top right corner to view them:","how-to-add-a-runtime-variable#How to Add a Runtime Variable":"To create a runtime variable, you can use the bru.setVar(name, value) function. This function allows you to store any value (e.g., tokens, response data, temporary user inputs) as a runtime variable.","using-a-runtime-variable#Using a Runtime Variable":"Once a runtime variable is created, you can use it in subsequent API requests by referencing it with the {{variableName}}syntax. The variable’s value will be dynamically injected into the request at runtime.","viewing-runtime-variables#Viewing Runtime Variables":"You can view all runtime variables by clicking on the Eye icon located in the top-right corner of the navigation bar\nThe request must be executed before you can view the runtime variables."},"title":"Runtime Variables"},"/docs/variables/variables-interpolation/":{"data":{"":"Variable interpolation allows you to use variables in your requests using the {{variableName}} syntax. Let’s explore how interpolation works with different data types.","api-authentication#API Authentication":"bru.setVar(\"authConfig\", { apiKey: \"your-api-key\", secret: \"your-secret\" }); // In request headers headers { \"X-API-Key\": \"{{authConfig.apiKey}}\", \"X-Secret\": \"{{authConfig.secret}}\" }","array-interpolation#Array Interpolation":"// Define your arrays const technologies = [\"REST\", \"GraphQL\", \"gRPC\"]; const settings = [ { port: 3000, env: \"dev\" }, { port: 8080, env: \"prod\" } ]; // Set arrays as variables bru.setVar(\"apiTypes\", technologies); bru.setVar(\"configs\", settings); // Using array elements in request { // Simple array access \"primaryAPI\": \"{{apiTypes[0]}}\", // \"REST\" \"alternativeAPI\": {{apiTypes}}, // Accessing object properties in arrays \"devPort\": {{configs[0].port}}, // 3000 \"prodEnv\": {{configs}}, // Using multiple array elements \"supported\": { \"apis\": [\"{{apiTypes[0]}}\", \"{{apiTypes[1]}}\"], } } // Interpolates to: // { // \"primaryAPI\": \"REST\", // \"alternativeAPI\": [ // \"REST\", // \"GraphQL\", // \"gRPC\" // ] // \"devPort\": 3000, // \"prodEnv\": [ // { // \"port\": 3000, // \"env\": \"dev\" // }, // { // \"port\": 8080, // \"env\": \"prod\" // } // ] // \"supported\": { // \"apis\": [\"REST\", \"GraphQL\"], // } // }","basic-interpolation#Basic Interpolation":"","booleans#Booleans":"// Setting a boolean variable bru.setVar(\"isActive\", true); // Using in request body { \"active\": {{isActive}} } // Interpolates to: { \"active\": true }","date-interpolation#Date Interpolation":"bru.setVar(\"timestamp\", new Date()); // Using in request { \"createdAt\": \"{{timestamp}}\" } // Interpolates to: // { // \"createdAt\": \"2025-04-23T13:57:56.341Z\" // }","dynamic-query-parameters#Dynamic Query Parameters":"bru.setVar(\"searchParams\", { limit: 10, offset: 0, filter: \"active\" }); // In URL GET http://api.example.com/users?limit={{searchParams.limit}}\u0026offset={{searchParams.offset}}\u0026filter={{searchParams.filter}}","numbers#Numbers":"// Setting a number variable bru.setVar(\"userId\", 123); // Using in request GET http://api.example.com/users/{{userId}} // Interpolates to: http://api.example.com/users/123","object-interpolation#Object Interpolation":"You can access object properties using dot notation. Here’s how to work with objects containing different data types:\n// Define your object with multiple data types const userProfile = { username: \"john_doe\", // string accountId: 12345, // number isVerified: true, // boolean preferences: { // nested object theme: \"dark\", notifications: true } }; // Set the object as a variable bru.setVar(\"user\", userProfile); // Using in request body { \"username\": \"{{user.username}}\", \"verified\": {{user.isVerified}}, \"preferences\": {{user.preferences}}, } // Interpolates to: // { // \"username\": \"john_doe\", // \"verified\": true, // \"preferences\": { // \"theme\": \"dark\", // \"notifications\": true // } // }","practical-examples#Practical Examples":"","request-body-with-mixed-types#Request Body with Mixed Types":"bru.setVar(\"product\", { name: \"Pro Edition\", price: 99.99, }); // In request body { \"productName\": \"{{product.name}}\", \"price\": {{product.price}}, \"firstFeature\": \"{{product.features[0]}}\", \"releaseDate\": \"{{product.metadata.released}}\" } Remember that variables set using bru.setVar() are available throughout your collection’s scope. Use them to make your requests more dynamic and maintainable.","strings#Strings":"// Setting a string variable bru.setVar(\"greeting\", \"Hello World\"); // Using in request GET http://api.example.com/{{greeting}} // Interpolates to: http://api.example.com/Hello World"},"title":"Variables Interpolation"}}