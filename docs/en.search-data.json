{"/about/":{"data":{"":"This is the about page."},"title":"About"},"/docs/":{"data":{"":"Trayce is a Git-friendly, offline-first, open-source API client and Docker network-monitor. It is born out of frustration with existing API clients which are all based on Electron, Tauri or other frameworks which use a web browser to render the user interface.","collection-format#Collection Format":"Trayce collections follow the bru-lang format and therefore are interoperable with the Bruno API client. You can open a Bruno collection with Trayce, and you can open a Trayce collection with Bruno. They are one and the same.","docker-network-monitor#Docker Network Monitor":"The Docker network monitor lets you see what requests are being made to, from and in-between your Docker containers. It differs from other developer proxy tools like Fiddler, HttpToolkit and Requestly in that it does not require the use of a proxy or setting up CA certificates to intercept TLS-encrypted messages. Instead it uses eBPF to intercept system calls at the kernel layer and propogates this information to the GUI."},"title":"Docs"},"/docs/docker-network/":{"data":{"":"The Docker Network Monitor lets you monitor network traffic to, from and in-between your local Docker containers without the need for a proxy. It can read TLS-encrypted traffic without needing custom CA certificates or any changes to your containers. All you have to do is start the TrayceAgent with a single command.\nThe supported protocols are:\nHTTP1.1 HTTP2 gRPC MySQL PostgreSQL"},"title":"Docker Network"},"/docs/docker-network/getting-started/":{"data":{"":"To get started, lets monitor a container, make an HTTP request from it and see that request appear in Trayce.","1-start-a-container#1. Start a Container":"Lets start an alpine container and install curl on it:\ndocker run -it alpine sh apk add curl Verify it works by running curl https://trayce.dev:","2-monitor-the-container#2. Monitor the Container":"Open Trayce, click on the Docker icon in the sidebar: Click on the “Containers” button, copy the command and run it in a console window. This will start the TrayceAgent. If the containers you wish to monitor are not running on the default network, you will have to append a --network arg to the command. Once the TrayceAgent has sucessfully started, the modal will change to a list of running containers. Check which container you want to monitor and click “Save”. In our case we want to monitor the alpine container we started in step 1.","3-make-a-request#3. Make a Request":"Go back to the shell console on the alpine container, and re-run curl https://trayce.dev, you should now see this request was picked up by Trayce and displayed in the GUI:"},"title":"Getting Started"},"/docs/docker-network/how-does-it-work/":{"data":{"":"Trayce does not rely on a proxy to read network traffic, even if it’s TLS-encrypted. Instead the TrayceAgent container is run on the same machine as the containers being monitored. It uses a combination of eBPF kprobes and uprobes to read raw, unencrypted network traffic.\nRaw byte streams of network traffic are sent from the kernel-space eBPF program, to a user-space program running in the agent container, which parses those streams into structured requests/responses. Which are then sent over gRPC to the GUI to be displayed to the user.\n--- config: layout: dagre --- flowchart TB n1[\"fa:fa-globe Network\"] \u003c--\u003e B[\"Kernel\"] B \u003c-- sys calls --\u003e C[\"libssl.so\"] C -- uprobes --\u003e D@{ label: \" TrayceAgent\nContainer\" } C \u003c-- lib calls --\u003e F[\"fa:fa-user\nMonitored\nContainer\"] B -- kprobes --\u003e D D --\u003e G[\"fa:fa-table Trayce GUI\"] B@{ shape: rect} C@{ shape: rect} D@{ shape: rect} style B stroke-width:2px,stroke-dasharray: 2 style C stroke-width:2px,stroke-dasharray: 2 style D width:150px style F width:150px","kprobes#kprobes":"eBPF kprobes are programs which hook into Linux kernel functions. They get executed any time the kernel function is called, or returned from (kretprobes). TrayceAgent attaches kprobes to kernel functions which transfer data over sockets, e.g. sendto and recvfrom. This allows us to read the raw bytes being sent and received over the network. Filtering is done on these calls to ensure we only capture TCP traffic from the containers we want to monitor.","uprobes#uprobes":"eBPF uprobes are like kprobes except they hook into user-space programs. To intercept TLS-encrypted traffic, the TrayceAgent attaches uprobes to the OpenSSL library (i.e. libssl.so.3) and reads any calls made to SSL_Write or SSL_Read. This way it is able to see the raw, unencrypted traffic, before it is encrypted to be sent over the network, or read incoming traffic after it has been decrypted by OpenSSL.\nFor programs written in Go, the functions for encrypting and decrypting TLS traffic in Go’s crypto/tls package are attached with uprobes in a similar way to how OpenSSL is done. This is because Go does not rely on OpenSSL for TLS encryption and instead comes with its own built-in package for encryption.","user-space#user-space":"The user-space part of the TrayceAgent is a program written in Go which receives the raw byte stream of network traffic, sent over a BPF ring-buffer map from the kprobes and uprobes mentioned above. The byte streams are segmented by TCP connection and an algorithm is run over the byte stream to detect which protocol is being used. If a supported protocol is detected, then it starts parsing the byte stream into request and response structs. Those structs are then sent over gRPC to the GUI to be displayed to the user.\nFor more in-depth documentation on the TrayceAgent, see the docs in its Github repo."},"title":"How Does It Work"},"/docs/docker-network/http-grpc/":{"data":{"":"Trayce can monitor HTTP and HTTP-based protocols, including HTTP1.1, HTTP2 and gRPC.","grpc#gRPC":"gRPC messages will initially appear with their raw data:\nTo parse the messages and properly display them, you must import the .proto file for the API in use. Do this by click the “Select .proto file” dropdown in the top right corner, and clicking “Import .proto file”. Click “Upload” and browse to the file in your machine.\nYou can now select the .proto file from the dropdown, and the message will be parsed and displayed in a readable format:","http#HTTP":""},"title":"HTTP \u0026 gRPC"},"/docs/docker-network/mysql-postgresql/":{"data":{"":"Trayce can monitor the network protocols for SQL databases including PostgreSQL and MySQL.","mysql#MySQL":"","postgresql#PostgreSQL":""},"title":"MySQL \u0026 PostgreSQL"},"/docs/getting-started/":{"data":{"":"Explore the following sections to get started using Trayce:\nInstall Create a collection Create a folder Create a request"},"title":"Getting Started"},"/docs/getting-started/create-collection/":{"data":{"":"A collection in Trayce is a structured group of API requests, tests, and related resources that helps you organize and manage your API testing workflow.","how-to-create-a-collection#How to Create a Collection":"Open Trayce Click on the ... button and select Create Collection from the dropdown (or click “New Collection” below the Trayce logo) Enter a name for your collection Choose a location on your filesystem to store the collection Click Create Congratulations! You have successfully created your first collection."},"title":"Create a Collection"},"/docs/getting-started/create-folder/":{"data":{"":"Trayce helps you organize your API requests efficiently by grouping them into folders. You can create a structured hierarchy that matches your API’s organization, making it easier to manage and navigate your collections.","how-to-create-a-folder#How to Create a Folder":"Right-click your collection from the file explorer Select New Folder from the menu Type a name for your folder and hit Enter"},"title":"Create a Folder"},"/docs/getting-started/create-request/":{"data":{"":"A request is the primary object in Trayce. Let’s walk through how to create your first request:","how-to-create-a-request#How to Create a Request":"Right-click your collection from the file explorer Select New Request from the menu (or press Ctrl+N on your keyboard) Type a name for your request and hit Enter You have successfully created your first request in Trayce! Feel free to add headers, query parameters, and a request body to your request, or play around with the other options available."},"title":"Create a Request"},"/docs/getting-started/install/":{"data":{"":"Trayce is a free and open-source, fast and lightweight API client for exploring and testing APIs. It’s designed to be a modern alternative to slow, browser-based API clients with a focus on speed, simplicity, and collaboration.","download#Download":"Download Trayce from here.","install#Install":"Trayce can currently only be installed by downloading a packaged installer and opening it on your machine. Package manager distribution is not yet available.\nmaclinuxwindows Download the .dmg installer from our releases page on GitHub. Open it and drag the Trayce icon to your Applications folder. On Debian-based distros you can download the .deb installer and install that from the command line by running:\nsudo dpkg -i trayce.deb For other distros you will have to follow the README.md to build Trayce from source.\nThe Windows version of Trayce is not yet available, sorry!","release-information#Release Information":"Trayce follows semantic versioning. You can check the GitHub releases page for:\nLatest version information Release notes Bug fixes New features included in each release"},"title":"Download \u0026 Install"},"/docs/scripting/":{"data":{"":"Scripts allow you to add additional functionality to the tool such as data generation, validation and integration with other tools and systems, including sending intermediate requests, parsing response data, updating environment variables, etc."},"title":"Scripting"},"/docs/scripting/execution-flow/":{"data":{"":"In Trayce scripts run in a : “Sandwich” flow order. This controls the order in which the scripts at various levels of your API test collections are executed.","1-sandwich-flow#1. Sandwich Flow":"In the Sandwich Flow, scripts are executed in the following order:\nsandwich-flow/ ├── Collection Pre Script │ └── Folder Pre Script │ └── Request Pre Script └── Request Post Script └── Folder Post Script └── Collection Post Script This order allows you to execute actions at multiple levels (collection, folder, and request) before and after each test. It is useful when you need to configure different environments or states before and after running tests at various levels.","2-sequential-natural-flow#2. Sequential (Natural) Flow":"Sequential flow is not yet implemented in Trayce! Check the GitHub releases page for updates, or subscribe to version updates here. In the Sequential Flow, scripts are executed in this order:\nsequential-flow/ ├── Collection Pre Script │ └── Folder Pre Script │ └── Request Pre Script └── Collection Post Script └── Folder Post Script └── Request Post Script This flow executes scripts in a more natural, linear order. After the Request Pre Script, it runs the Collection Post Script, followed by Folder Post Script, and finally, the Request Post Script. This flow may be better suited when you want a clean execution from top to bottom.","flow-types#Flow Types":"Sandwich Flow Sequential (Natural) Flow"},"title":"Execution Flow"},"/docs/scripting/js-file/":{"data":{"":"Trayce provides the ability to create JavaScript files where you can modularize common code and reuse code across different requests or collections.\nThis can be especially helpful in complex scripting scenarios where the same test will be run across multiple requests, or you’re looking to leverage data that lays outside of Trayce.","how-to-add-a-script#How to Add a Script":"You can generate a JS File by:\nRight click collection or folder Select New JS Script from dropdown. Type the name and hit enter, your code editor will open with that file The default code editor in Tryace is VSCode. To change this click File -\u003e Settings -\u003e Editor and modify the Code editor command value.","how-to-use-a-script#How to Use a Script":"Once your JS File has been created, you can now import the functions into any Script tab across your resources. For example if we create a script called utils.js with this content:\nconst f = require('faker'); function whatsMyName() { return f.name.firstName(); } module.exports = { whatsMyName, }; Then add a pre-request script:\nconst { whatsMyName } = require('./utils.js'); const name = whatsMyName(); console.log(\"sending request, name:\", name); req.setHeader('X-Auth-Token', 'abcd1234'); When the request is sent, the console output will show the results of the script:"},"title":"Javascript File"},"/docs/scripting/js-reference/":{"data":{"":"Trayce offers powerful scripting capabilities that allow you to extend and automate your API testing workflows. Here is the complete set of API reference for the scripting feature in Trayce.","bru#Bru":"The bru variable is available inside your scripting and testing context. It exposes methods that allow you to interact with, e.g., process variables, environment variables and collection variables.\nHere is a complete table for all available methods with the bru.\nTitle Description bru.cwd() Returns the current working directory. bru.getEnvName() Retrieves the environment name. bru.getProcessEnv(key) Fetches the process environment variable for a given key. bru.hasEnvVar(key) Checks if the environment variable exists. bru.getEnvVar(key) Retrieves the value of an environment variable. bru.getFolderVar(key) Fetches a folder-specific variable by key. bru.getCollectionVar(key) Retrieves the collection-level variable for the key. bru.setEnvVar(key, value) Sets a new environment variable. bru.deleteEnvVar(key) Deletes a specific environment variable. bru.hasVar(key) Checks if a variable exists. bru.getVar(key) Retrieves the value of a variable. bru.setVar(key, value) Sets a new variable with a key-value pair. bru.deleteVar(key) Deletes a specific variable. bru.deleteAllVars() Deletes all variables. bru.setNextRequest(requestName) Sets the next request to execute. req.disableParsingResponseJson() Disables JSON response parsing for the request. bru.getRequestVar(key) Retrieves the value of a request variable. bru.runRequest(requestPathName) Executes a request by its path name. bru.getAssertionResults() Retrieves the results of assertions. bru.getTestResults() Fetches the test bru.sendRequest(options, callback) Sends a programmatic HTTP request within your script bru.getOauth2CredentialVar(key) Retrieves an OAuth2 credential variable value. bru.getCollectionName() Retrieves the current collection name. bru.cookies.jar() Creates a cookie jar instance for managing cookies. Below is the API documentation for the methods available on bru","collection-information#Collection Information":"","collection-runner-utility-functions#Collection Runner Utility Functions":"","collection-variables#Collection Variables":"Trayce allows you to get collection variables on the fly.","cookie-management#Cookie Management":"Trayce provides Cookie Jar APIs that enable programmatic cookie management in request scripts. These APIs allow you to set, get, and delete cookies programmatically using a cookie jar instance.\nCookie Management is not yet implemented in Trayce. Check the GitHub releases page for updates, or subscribe to version updates here.","cookiesjar#\u003ccode\u003ecookies.jar()\u003c/code\u003e":"Create a cookie jar instance for managing cookies.\nSyntax:\nconst jar = bru.cookies.jar(); Returns: A cookie jar instance with methods for cookie management\nExample:\nconst jar = bru.cookies.jar();","deletevar#\u003ccode\u003edeleteVar\u003c/code\u003e":"Delete the runtime variable\nExample:\nbru.deleteVar(\"petId\");","disableparsingresponsejson#\u003ccode\u003edisableParsingResponseJson\u003c/code\u003e":"To prevent the automatic parsing of the JSON response body and work directly with the raw data, you can use the expression below in the pre-request script of the request.\nExample:\nbru.disableParsingResponseJson(); disableParsingResponseJson() is not yet implemented in Trayce. Check the GitHub releases page for updates, or subscribe to version updates here.","environments#Environments":"Trayce allows you to get and set Trayce environment variables on the fly.","error-handling#Error Handling":"","folder-variables#Folder Variables":"Trayce allows you to get folder variables on the fly.","getassertionresults#\u003ccode\u003egetAssertionResults\u003c/code\u003e":"Obtain the assertion results of a request by calling bru.getAssertionResults within test scripts.\ngetAssertionResults() is not yet implemented in Trayce. Check the GitHub releases page for updates, or subscribe to version updates here. Example:\nconst assertionResults = await bru.getAssertionResults();","getauthmode#\u003ccode\u003egetAuthMode\u003c/code\u003e":"Get the current authentication mode\nExample:\nlet authMode = req.getAuthMode();","getbody#\u003ccode\u003egetBody\u003c/code\u003e":"Get the current request body/payload\nExample:\nconst body = req.getBody();","getbody-1#\u003ccode\u003egetBody\u003c/code\u003e":"Get the response data\nExample:\nlet data = res.getBody();","getcollectionname#\u003ccode\u003egetCollectionName\u003c/code\u003e":"Retrieve the name of the current collection.\nExample:\nconst collectionName = bru.getCollectionName(); console.log('Current collection:', collectionName);","getcollectionvar#\u003ccode\u003egetCollectionVar\u003c/code\u003e":"Get the collection variable\nExample:\nlet namespace = bru.getCollectionVar(\"namespace\");","getenvvar#\u003ccode\u003egetEnvVar\u003c/code\u003e":"Get the Trayce environment variable\nExample:\nlet token = bru.getEnvVar(\"access_token\");","getexecutionmode#\u003ccode\u003egetExecutionMode\u003c/code\u003e":"Get the current active execution mode of the request.\nReturns:\nrunner: When the request is being executed as part of a collection run standalone: When the request is being executed individually Example:\nconst executionMode = req.getExecutionMode(); console.log(`Request is running in ${executionMode} mode`);","getexecutionplatform#\u003ccode\u003egetExecutionPlatform\u003c/code\u003e":"Get the platform on which the request is being executed.\nReturns:\napp: When running in the Trayce desktop application cli: When running through the Trayce CLI Example:\nconst platform = req.getExecutionPlatform(); console.log(`Request is running on ${platform} platform`);","getfoldervar#\u003ccode\u003egetFolderVar\u003c/code\u003e":"Get the folder variable\nExample:\nlet company = bru.getFolderVar(\"company\");","getglobalenvvar#\u003ccode\u003egetGlobalEnvVar\u003c/code\u003e":"Get the Trayce global environment variable.\nSyntax:\nbru.getGlobalEnvVar(key); Example:\nbru.getGlobalEnvVar(\"val\");","getheader#\u003ccode\u003egetHeader\u003c/code\u003e":"Get the request header by name\nExample:\nreq.getHeader(\"transaction-id\");","getheader-1#\u003ccode\u003egetHeader\u003c/code\u003e":"Get the response header by name\nExample:\nlet transactionId = res.getHeader(\"transaction-id\");","getheaders#\u003ccode\u003egetHeaders\u003c/code\u003e":"Get the current request headers\nExample:\nconst headers = req.getHeaders();","getheaders-1#\u003ccode\u003egetHeaders\u003c/code\u003e":"Get the response headers\nExample:\nlet headers = res.getHeaders();","getmethod#\u003ccode\u003egetMethod\u003c/code\u003e":"Get the current request method\nExample:\nconst method = req.getMethod();","getname#\u003ccode\u003egetName\u003c/code\u003e":"Get the current request name\nExample:\nconst name = req.getName();","getoauth2credentialvar#\u003ccode\u003egetOauth2CredentialVar\u003c/code\u003e":"Retrieve an OAuth2 credential variable value. This is useful for accessing OAuth2 tokens and credentials.\ngetOauth2CredentialVar() is not yet implemented in Trayce. Check the GitHub releases page for updates, or subscribe to version updates here. Example:\nconst accessToken = bru.getOauth2CredentialVar(\"access_token\");","getprocessenv#\u003ccode\u003egetProcessEnv\u003c/code\u003e":"Get the Node process environment variable. This allows secret token usage without committing secrets to version control.\nExample:\nlet secret_token = bru.getProcessEnv(\"secret_access_token\");","getresponsetime#\u003ccode\u003egetResponseTime\u003c/code\u003e":"Get the response time\nExample:\nlet responseTime = res.getResponseTime();","getsize#\u003ccode\u003egetSize\u003c/code\u003e":"Get the response size in bytes. Returns an object with the following properties:\nbody: number, headers: number, total: number Syntax:\nconst responseSize = res.getSize() Example:\ntest(\"Response body size is less than 1KB\", () =\u003e { const responseSize = res.getSize().body; expect(responseSize).to.be.lessThan(1024); });","getstatus#\u003ccode\u003egetStatus\u003c/code\u003e":"Get the response status\nExample:\nlet status = res.getStatus();","getstatustext#\u003ccode\u003egetStatusText\u003c/code\u003e":"Get the response status text\nExample:\nlet statusText = res.getStatusText();","gettestresults#\u003ccode\u003egetTestResults\u003c/code\u003e":"Obtain the test results of a request by calling bru.getTestResults within test scripts.\ngetTestResults() is not yet implemented in Trayce. Check the GitHub releases page for updates, or subscribe to version updates here. Example:\nconst testResults = await bru.getTestResults();","gettimeout#\u003ccode\u003egetTimeout\u003c/code\u003e":"Gets the current timeout value of the request.\nExample:\nconst timeout = req.getTimeout(); console.log(timeout); // Logs the current timeout value","geturl#\u003ccode\u003egetUrl\u003c/code\u003e":"Get the current request url\nExample:\nlet url = req.getUrl();","geturl-1#\u003ccode\u003egetUrl\u003c/code\u003e":"Get the response URL. In case of redirects, you will get the final URL which may be different from the original request URL if redirects were followed. This functionality is also available as a property res.url.\nThis method is only available in post-response scripts and test scripts. Returns: Response URL as a string.\nExample:\n// Get the response URL const responseUrl = res.getUrl(); console.log(\"Response URL:\", responseUrl); // Test that the response URL is as expected test(\"should end up at correct URL after redirects\", () =\u003e { const url = res.getUrl(); expect(url).to.equal(\"https://www.apple.com\"); });","getvar#\u003ccode\u003egetVar\u003c/code\u003e":"Get the runtime variable\nExample:\nlet petId = bru.getVar(\"petId\");","helpers#Helpers":"","interpolate#\u003ccode\u003einterpolate\u003c/code\u003e":"Evaluates dynamic variables and environment variables within a string. This function allows you to use Trayce’s dynamic variables (like {{$randomFirstName}}) directly in your scripts.\nSyntax:\nbru.interpolate(string); Example:\n// Generate a random first name const firstName = bru.interpolate('{{$randomFirstName}}'); console.log('Random first name:', firstName); // Generate a random email const email = bru.interpolate('{{$randomEmail}}'); // Generate multiple dynamic values in one call const userInfo = bru.interpolate(` Name: {{$randomFullName}} Job: {{$randomJobTitle}} Email: {{$randomEmail}} `);","jarclear#\u003ccode\u003ejar.clear\u003c/code\u003e":"Clear all cookies from the cookie jar.\nSyntax:\njar.clear(); Example:\nconst jar = bru.cookies.jar(); // Clear all cookies jar.clear();","jardeletecookie#\u003ccode\u003ejar.deleteCookie\u003c/code\u003e":"Delete a specific cookie by name.\nSyntax:\njar.deleteCookie(url, name); Parameters:\nurl: The URL for which to delete the cookie name: The name of the cookie to delete Example:\nconst jar = bru.cookies.jar(); // Delete a cookie jar.deleteCookie(\"https://example.com\", \"sessionId\"); When deleting cookies, the domain and path options must match the original cookie’s domain and path for the deletion to be successful.","jardeletecookies#\u003ccode\u003ejar.deleteCookies\u003c/code\u003e":"Delete all cookies for a specific URL.\nSyntax:\njar.deleteCookies(url); Parameters:\nurl: The URL for which to delete all cookies Example:\nconst jar = bru.cookies.jar(); // Delete all cookies for a specific URL jar.deleteCookies(\"https://example.com\");","jargetcookie#\u003ccode\u003ejar.getCookie\u003c/code\u003e":"Get a specific cookie by name.\nSyntax:\njar.getCookie(url, name); Parameters:\nurl: The URL for which to retrieve the cookie name: The name of the cookie to retrieve Returns: The cookie object or null if not found\nExample:\nconst jar = bru.cookies.jar(); const sessionCookie = await jar.getCookie(\"https://example.com\", \"sessionId\"); if (sessionCookie) { console.log(\"Session ID:\", sessionCookie.value); console.log(\"Expires:\", sessionCookie.expires); }","jargetcookies#\u003ccode\u003ejar.getCookies\u003c/code\u003e":"Get all cookies for a specific URL.\nSyntax:\njar.getCookies(url); Parameters:\nurl: The URL for which to retrieve all cookies Returns: Array of cookie objects or empty array if no cookies found\nExample:\nconst jar = bru.cookies.jar(); const allCookies = await jar.getCookies(\"https://example.com\"); console.log(\"All cookies:\", allCookies);","jarsetcookie#\u003ccode\u003ejar.setCookie\u003c/code\u003e":"Set a single cookie with specified attributes. This method has two overloads for different use cases.\nSyntax:\n// Overload 1: Key-value format jar.setCookie(url, name, value); // Overload 2: Object format jar.setCookie(url, cookieObject); Parameters:\nurl: The URL for which the cookie should be set name: The name of the cookie (for key-value format) value: The value of the cookie (for key-value format) cookieObject: Cookie object with the following properties: key: The name of the cookie value: The value of the cookie domain: The domain where the cookie is valid path: The URL path where the cookie will be sent (default: “/”) expires: The expiration date (Date object or string) maxAge: Maximum age in seconds secure: Boolean indicating if the cookie should only be sent over HTTPS httpOnly: Boolean indicating if the cookie should be HTTP-only sameSite: SameSite attribute (“Strict”, “Lax”, or “None”) Example:\nconst jar = bru.cookies.jar(); // Set a simple cookie using key-value format jar.setCookie(\"https://example.com\", \"sessionId\", \"abc123\"); // Set a cookie with options using object format jar.setCookie(\"https://example.com\", { key: \"userToken\", value: \"xyz789\", domain: \"example.com\", path: \"/api\", secure: true, httpOnly: true, maxAge: 3600 // 1 hour });","jarsetcookies#\u003ccode\u003ejar.setCookies\u003c/code\u003e":"Set multiple cookies at once using an array of cookie objects.\nSyntax:\njar.setCookies(url, cookies); Parameters:\nurl: The URL for which the cookies should be set cookies: Array of cookie objects, each with the following properties: key: The name of the cookie value: The value of the cookie domain: (Optional) The domain where the cookie is valid path: (Optional) The URL path where the cookie will be sent expires: (Optional) The expiration date maxAge: (Optional) Maximum age in seconds secure: (Optional) Boolean indicating if the cookie should only be sent over HTTPS httpOnly: (Optional) Boolean indicating if the cookie should be HTTP-only sameSite: (Optional) SameSite attribute Example:\nconst jar = bru.cookies.jar(); jar.setCookies(\"https://example.com\", [ { key: \"sessionId\", value: \"abc123\", secure: true, httpOnly: true }, { key: \"userPreference\", value: \"dark-mode\", path: \"/\", maxAge: 86400 // 24 hours } ]);","node-process-environment#Node process environment":"Trayce allows you to get Node process environment variables on the fly.","oauth2-credentials#OAuth2 Credentials":"","onfail#\u003ccode\u003eonFail\u003c/code\u003e":"The onFail function allows you to handle request errors in a custom way. This is useful for implementing custom error handling logic, logging, or taking specific actions when a request fails.\nError handling with scripts is not yet implemented in Trayce. Check the GitHub releases page for updates, or subscribe to version updates here.","request#Request":"The req variable represents the HTTP request object and is automatically available inside your scripting and testing context. It provides methods to access and modify the current request’s properties such as URL, method, headers, body, and other configuration options before the request is sent to the server.\nBelow is the API documentation for the methods available on req\nThe req object is available in pre-request scripts and test scripts, allowing you to modify request properties before execution and access them after completion.","request-order#Request Order":"You can influence the order in which requests are being run by the request-runner (UI) or the CLI.","response#Response":"The res variable represents the HTTP response object and is automatically available inside your scripting and testing context after a request is executed. It contains all the information about the response received from the server, including status codes, headers, body data, and timing information.\nThe res object is only available in post-request scripts and test scripts, as it contains the response data from the completed request. Below are the properties available on the res object.\nstatus: The HTTP response status code (e.g., 200, 404, 500) statusText: The HTTP response status text (e.g., “OK”, “Not Found”, “Internal Server Error”) headers: An object containing all response headers body: The response body data (automatically parsed as JSON if the response is JSON) responseTime: The total time taken for the request in milliseconds The body property is automatically parsed as JSON if the response has a JSON content type. For other content types, it will be a string. Below are the methods available on the res object.","runrequest#\u003ccode\u003erunRequest\u003c/code\u003e":"You can execute any request in the collection and retrieve the response directly within the script.\nSyntax:\nconst requestResponse = await bru.runRequest( \"absolute/path/to/a/request/from/collection/root\" ); Example:\nconst requestResponse = await bru.runRequest(\"echo/echo json\");","runtime-variables#Runtime Variables":"Trayce allows you to get, set and delete runtime variables on the fly.","sendrequest#\u003ccode\u003esendRequest\u003c/code\u003e":"Send a programmatic HTTP request within your script. This allows you to make additional API calls during script execution.\nSyntax:\nawait bru.sendRequest({ method: string, url: string, headers?: object, data?: string | object, timeout?: number }, callback) Parameters:\nmethod: HTTP method (GET, POST, PUT, etc.) url: The URL to send the request to headers: (Optional) Request headers data: (Optional) Request data. Can be a string or object timeout: (Optional) Request timeout in milliseconds callback: Function to handle the response with signature (err, res) Example:\nawait bru.sendRequest({ method: 'POST', url: 'https://trayce.dev', headers: { 'Content-Type': 'application/json', }, data: { key: 'value' }, }, function (err, res) { if (err) { console.error('Error:', err); return; } console.log('Response:', res.data); });","setbody#\u003ccode\u003esetBody\u003c/code\u003e":"Set the request body/payload\nExample:\nreq.setBody({ username: \"john nash\", password: \"governingdynamics\", });","setbody-1#\u003ccode\u003esetBody\u003c/code\u003e":"Set the response body data\nExample:\nres.setBody({ message: \"Custom response data\" });","setenvvar#\u003ccode\u003esetEnvVar\u003c/code\u003e":"Set the Trayce environment variable. By default, environment variables are temporary and do not persist between app restarts.\nSyntax:\nbru.setEnvVar(key, value, options?) Parameters:\nkey (string): The environment variable name value (any): The value to set options (object, optional): Configuration options persist (boolean): When true, saves the variable to file system. When false or not provided, maintains in-memory behavior. Examples:\n// In-memory only (default behavior) bru.setEnvVar(\"sessionId\", \"temp\"); // Persist to file system bru.setEnvVar(\"apiToken\", \"12345\", { persist: true }); // In post-response script function onResponse(res) { let data = res.getBody(); let token = bru.setEnvVar(\"access_token\", data.token, { persist: true }); }","setglobalenvvar#\u003ccode\u003esetGlobalEnvVar\u003c/code\u003e":"Set the Trayce global environment variable.\nSyntax:\nbru.setGlobalEnvVar(key, value); Example:\nbru.setGlobalEnvVar(\"val\", \"trayce\");","setheader#\u003ccode\u003esetHeader\u003c/code\u003e":"Set the request header by name\nExample:\nreq.setHeader(\"content-type\", \"application/json\");","setheaders#\u003ccode\u003esetHeaders\u003c/code\u003e":"Set the current request headers\nExample:\nreq.setHeaders({ \"content-type\": \"application/json\", \"transaction-id\": \"foobar\", });","setmaxredirects#\u003ccode\u003esetMaxRedirects\u003c/code\u003e":"Set the maximum number of redirects to follow\nsetMaxRedirects() is not yet implemented in Trayce. Check the GitHub releases page for updates, or subscribe to version updates here. Example:\nreq.setMaxRedirects(5);","setmethod#\u003ccode\u003esetMethod\u003c/code\u003e":"Set the current request method\nExample:\nreq.setMethod(\"POST\");","setnextrequest#\u003ccode\u003esetNextRequest\u003c/code\u003e":"By default, the collection runner (UI) and the CLI run requests in order. You can change the order by calling setNextRequest with the name of the next request to be run. This works only in a post-request script or test-script.\nsetNextRequest() is not yet implemented in Trayce. Check the GitHub releases page for updates, or subscribe to version updates here. Example:\nbru.setNextRequest(\"Get process status\"); You can also abort the run by explicitly setting the next request to null Example:\nbru.setNextRequest(null); // aborts the run gracefully","settimeout#\u003ccode\u003esetTimeout\u003c/code\u003e":"Sets a timeout for the request.\nExample:\nreq.setTimeout(5000); // Sets the timeout to 5000 milliseconds (5 seconds)","seturl#\u003ccode\u003esetUrl\u003c/code\u003e":"Set the current request url\nExample:\nreq.setUrl(\"https://api.github.com/search/repositories?q=vue\");","setvar#\u003ccode\u003esetVar\u003c/code\u003e":"Set the runtime variable\nExample:\nlet data = res.getBody(); bru.setVar(\"petId\", data.id);","skiprequest#\u003ccode\u003eskipRequest\u003c/code\u003e":"To skip the execution of the current request, use bru.runner.skipRequest() in the pre-request script section. This function is valid only within the context of a collection run.\nskipRequest() is not yet implemented in Trayce. Check the GitHub releases page for updates, or subscribe to version updates here. Example:\nbru.runner.skipRequest();","sleep#\u003ccode\u003esleep\u003c/code\u003e":"Pauses execution for the specified duration. This is useful for introducing delays or waiting for a specific amount of time before proceeding with the next operation.\nExample:\nawait bru.sleep(3000);","stopexecution#\u003ccode\u003estopExecution\u003c/code\u003e":"You can terminate the collection run by using bru.runner.stopExecution() in the pre-request scripts, post-request scripts, or the test scripts. This function is effective only within the context of a collection run.\nstopExecution() is not yet implemented in Trayce. Check the GitHub releases page for updates, or subscribe to version updates here. Example:\nbru.runner.stopExecution();","test-utility-functions#Test Utility Functions":""},"title":"Javascript Reference"},"/docs/scripting/npm-packages/":{"data":{"":"Trayce comes with a set of commonly used NPM packages built-in. But also lets you install your own packages in collections.\nTrayce supports CommonJS syntax require for importing libraries. ES Modules import/export are not supported at this time.","external-packages#External Packages":"To load your own external packages, you must initialize a package.json file, you can do this by running this within a collection folder.\nnpm init -y If you run this in a collection called collection1 then the resulting folder structure will be something like: collection1 api-folder details.bru node_modules .gitignore bruno.json package.json package-lock.json .env You can then add packages as you normally would in a NodeJS project by running npm add .","inbuilt-packages#Inbuilt Packages":"Below is the list of inbuilt libraries available:\naxios - Promise based HTTP client for the browser and node.js atob - Turn base64-encoded ascii data back to binary. btoa - Turn binary data to base64-encoded ascii. chai - BDD/TDD assertion library for node.js and the browser. moment - Parse, validate, manipulate, and display dates and times in JavaScript. uuid - For the creation of RFC4122 UUIDs. nanoid - A tiny, secure, URL-friendly, unique string ID generator for JavaScript. crypto-js - JavaScript library of crypto standards. tv4 - Tiny Validator for JSON Schema v4. node-fetch - A light-weight module that brings Fetch API to Node.js. lodash - A modern JavaScript utility library delivering modularity, performance \u0026 extras. ajv - Ajv JSON schema validator. cheerio - Library for parsing and manipulating HTML and XML. xml2js - Simple XML to JavaScript object converter for Node.js. Here’s an example demonstrating how to use the chai library:\nconst chai = require('chai'); const { expect } = chai; function add(a, b) { return a + b; } const result = add(2, 3); expect(result).to.equal(5); console.log('Test passed!'); You can include this code in a pre-request script to test it out."},"title":"NPM Packages"},"/docs/scripting/random-values/":{"data":{"":"Random variables enable you to generate and use random data in your testing workflow. Trayce uses the faker.js library to generate random data. You can use these variables like any other variables in Trayce. The syntax to use random variables is {{$randomData}}, and you can use them in the request body, authentication, parameters, and other fields.\nRandom variables are case-sensitive and follow the camelCase convention.","available-dynamic-variables#Available Dynamic Variables":"Trayce provides a comprehensive set of dynamic variables for generating test data. These variables are organized into categories based on their functionality.","basic-data-types#Basic Data Types":"Variable Name Description Examples {{$guid}} A random UUID 550e8400-e29b-41d4-a716-446655440000 {{$timestamp}} Current timestamp in milliseconds 1562757107 {{$isoTimestamp}} Current timestamp in ISO format 2024-03-20T12:34:56.789Z {{$randomUUID}} A random UUID 550e8400-e29b-41d4-a716-446655440000 {{$randomNanoId}} A random Nano ID V1StGXR8_Z5jdHi6B5cEn4c8b8w {{$randomAlphaNumeric}} A random alpha-numeric character 6, y, z {{$randomBoolean}} A random boolean value true, false {{$randomInt}} A random integer between 0 and 1000 802, 494, 200 {{$randomColor}} A random color red, fuchsia, grey {{$randomHexColor}} A random hex value #47594a, #431e48, #106f21 {{$randomAbbreviation}} A random abbreviation SQL, PCI, JSON {{$randomWord}} A random word protocol, interface {{$randomWords}} Multiple random words quick brown fox","business#Business":"Variable Name Description Examples {{$randomCompanyName}} A random company name TechCorp Inc. {{$randomCompanySuffix}} A random company suffix LLC, Inc., Ltd. {{$randomBs}} A random business buzz phrase revolutionize end-to-end systems {{$randomBsAdjective}} A random business adjective innovative, scalable {{$randomBsBuzz}} A random business buzz word synergize, leverage {{$randomBsNoun}} A random business noun solutions, platform {{$randomCatchPhrase}} A random company catch phrase Innovate. Create. Transform. {{$randomCatchPhraseAdjective}} A random catch phrase adjective innovative, revolutionary {{$randomCatchPhraseDescriptor}} A random catch phrase descriptor next-generation, cutting-edge {{$randomCatchPhraseNoun}} A random catch phrase noun solutions, platform","commerce#Commerce":"Variable Name Description Examples {{$randomPrice}} A random price 99.99, 149.95 {{$randomProduct}} A random product Chair, Table {{$randomProductAdjective}} A random product adjective Ergonomic, Modern {{$randomProductMaterial}} A random product material Wood, Metal {{$randomProductName}} A random product name Ergonomic Wooden Chair {{$randomDepartment}} A random department name Electronics, Clothing","database#Database":"Variable Name Description Examples {{$randomDatabaseColumn}} A random database column name id, name, created_at {{$randomDatabaseType}} A random database type varchar, int, timestamp {{$randomDatabaseCollation}} A random database collation utf8_general_ci, latin1_swedish_ci {{$randomDatabaseEngine}} A random database engine InnoDB, MyISAM","dates#Dates":"Variable Name Description Examples {{$randomDateFuture}} A random future date 2024-12-31T23:59:59.999Z {{$randomDatePast}} A random past date 2020-01-01T00:00:00.000Z {{$randomDateRecent}} A random recent date 2024-03-15T12:34:56.789Z {{$randomWeekday}} A random weekday Monday, Tuesday {{$randomMonth}} A random month January, February","files-and-system#Files and System":"Variable Name Description Examples {{$randomFileName}} A random file name document.pdf {{$randomFileType}} A random file type application/pdf {{$randomFileExt}} A random file extension .pdf, .jpg {{$randomCommonFileName}} A random common file name document.pdf {{$randomCommonFileType}} A random common file type application/pdf {{$randomCommonFileExt}} A random common file extension .pdf, .jpg {{$randomFilePath}} A random file path /path/to/file.txt {{$randomDirectoryPath}} A random directory path /usr/local/bin {{$randomMimeType}} A random MIME type application/json","finance#Finance":"Variable Name Description Examples {{$randomBankAccount}} A random bank account number 1234567890 {{$randomBankAccountName}} A random bank account name Checking Account {{$randomCreditCardMask}} A masked credit card number **** **** **** 1234 {{$randomBankAccountBic}} A random BIC code DEUTDEFF {{$randomBankAccountIban}} A random IBAN DE89370400440532013000 {{$randomTransactionType}} A random transaction type deposit, withdrawal {{$randomCurrencyCode}} A random currency code USD, EUR, JPY {{$randomCurrencyName}} A random currency name US Dollar, Euro, Yen {{$randomCurrencySymbol}} A random currency symbol $, €, ¥ {{$randomBitcoin}} A random Bitcoin address 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa","hacker-and-lorem#Hacker and Lorem":"Variable Name Description Examples {{$randomNoun}} A random noun protocol, interface {{$randomVerb}} A random verb hack, override {{$randomIngverb}} A random -ing verb hacking, overriding {{$randomAdjective}} A random adjective digital, virtual {{$randomPhrase}} A random phrase Try to reboot the SQL bus {{$randomLoremWord}} A random Lorem Ipsum word lorem, ipsum {{$randomLoremWords}} Multiple Lorem Ipsum words lorem ipsum dolor {{$randomLoremSentence}} A random Lorem Ipsum sentence Lorem ipsum dolor sit amet. {{$randomLoremSentences}} Multiple Lorem Ipsum sentences Lorem ipsum dolor sit amet. Consectetur adipiscing elit. {{$randomLoremParagraph}} A random Lorem Ipsum paragraph Lorem ipsum dolor sit amet… {{$randomLoremParagraphs}} Multiple Lorem Ipsum paragraphs Lorem ipsum dolor sit amet…\\n\\nConsectetur adipiscing elit… {{$randomLoremText}} A random Lorem Ipsum text Lorem ipsum dolor sit amet… {{$randomLoremSlug}} A random Lorem Ipsum slug lorem-ipsum-dolor {{$randomLoremLines}} Multiple Lorem Ipsum lines Lorem ipsum dolor\\nConsectetur adipiscing elit","images#Images":"Variable Name Description Examples {{$randomAvatarImage}} A random avatar image URL https://i.pravatar.cc/300 {{$randomImageUrl}} A random image URL https://picsum.photos/200/300 {{$randomAbstractImage}} A random abstract image https://loremflickr.com/320/240/abstract {{$randomAnimalsImage}} A random animal image https://loremflickr.com/320/240/animals {{$randomBusinessImage}} A random business image https://loremflickr.com/320/240/business {{$randomCatsImage}} A random cat image https://loremflickr.com/320/240/cats {{$randomCityImage}} A random city image https://loremflickr.com/320/240/city {{$randomFoodImage}} A random food image https://loremflickr.com/320/240/food {{$randomNightlifeImage}} A random nightlife image https://loremflickr.com/320/240/nightlife {{$randomFashionImage}} A random fashion image https://loremflickr.com/320/240/fashion {{$randomPeopleImage}} A random people image https://loremflickr.com/320/240/people {{$randomNatureImage}} A random nature image https://loremflickr.com/320/240/nature {{$randomSportsImage}} A random sports image https://loremflickr.com/320/240/sports {{$randomTransportImage}} A random transport image https://loremflickr.com/320/240/transport {{$randomImageDataUri}} A random image data URI data:image/png;base64,…","internet-and-network#Internet and Network":"Variable Name Description Examples {{$randomIP}} A random IPv4 address 241.102.234.100, 216.7.27.38 {{$randomIPV4}} A random IPv4 address 192.168.1.1 {{$randomIPV6}} A random IPv6 address dbe2:7ae6:119b:c161:1560:6dda:3a9b:90a9 {{$randomMACAddress}} A random MAC address 33:d4:68:5f:b4:c7, 1f:6e:db:3d:ed:fa {{$randomPassword}} A random 15-character alpha-numeric password t9iXe7COoDKv8k3, QAzNFQtvR9cg2rq {{$randomLocale}} A random two-letter language code (ISO 639-1) ny, sr, si {{$randomUserAgent}} A random user agent Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.9.8; rv:15.6) Gecko/20100101 Firefox/15.6.6 {{$randomProtocol}} A random internet protocol http, https {{$randomSemver}} A random semantic version number 7.0.5, 2.5.8, 6.4.9 {{$randomDomainName}} A random domain name example.com {{$randomDomainSuffix}} A random domain suffix .com, .org, .net {{$randomDomainWord}} A random domain word example, test, demo {{$randomExampleEmail}} A random example email user@example.com {{$randomEmail}} A random email address john.doe@example.com {{$randomUserName}} A random username johndoe123 {{$randomUrl}} A random URL https://example.com","location#Location":"Variable Name Description Examples {{$randomCity}} A random city name New York, London, Tokyo {{$randomStreetName}} A random street name Main Street, Park Avenue {{$randomStreetAddress}} A random street address 123 Main St, 456 Park Ave {{$randomCountry}} A random country name United States, Japan, Germany {{$randomCountryCode}} A random country code US, JP, DE {{$randomLatitude}} A random latitude 40.7128, 35.6762 {{$randomLongitude}} A random longitude -74.0060, 139.6503","names-and-personal-information#Names and Personal Information":"Variable Name Description Examples {{$randomFirstName}} A random first name Ethan, Chandler, Megane {{$randomLastName}} A random last name Schaden, Schneider, Willms {{$randomFullName}} A random first and last name Connie Runolfsdottir, Sylvan Fay, Jonathon Kunze {{$randomNamePrefix}} A random name prefix Dr., Ms., Mr. {{$randomNameSuffix}} A random name suffix I, MD, DD {{$randomJobArea}} A random job area Marketing, Engineering, Sales {{$randomJobDescriptor}} A random job descriptor Senior, Lead, Junior {{$randomJobTitle}} A random job title Software Engineer, Product Manager {{$randomJobType}} A random job type Full-time, Contract, Part-time {{$randomPhoneNumber}} A random phone number +1-555-123-4567 {{$randomPhoneNumberExt}} A random phone number with extension +1-555-123-4567 ext. 123","usage-examples#Usage Examples":"Here are some common use cases for random variables:\nTest Data Generation:\n{ \"user\": { \"id\": \"{{$randomUUID}}\", \"name\": \"{{$randomFullName}}\", \"email\": \"{{$randomEmail}}\", \"phone\": \"{{$randomPhoneNumber}}\", \"address\": { \"street\": \"{{$randomStreetAddress}}\", \"city\": \"{{$randomCity}}\", \"country\": \"{{$randomCountry}}\" } } } Authentication:\n{ \"credentials\": { \"username\": \"{{$randomUserName}}\", \"password\": \"{{$randomPassword}}\", \"lastLogin\": \"{{$isoTimestamp}}\" } } Business Data:\n{ \"company\": { \"name\": \"{{$randomCompanyName}}\", \"catchPhrase\": \"{{$randomCatchPhrase}}\", \"department\": \"{{$randomDepartment}}\", \"account\": { \"number\": \"{{$randomBankAccount}}\", \"type\": \"{{$randomTransactionType}}\" } } }","using-random-variables-in-scripts#Using Random Variables in Scripts":"To use random variables in pre-request or post-response scripts, use the bru.interpolate() function. For example:\n// Generate a random first name const firstName = bru.interpolate('{{$randomFirstName}}'); console.log('Random first name:', firstName); // Generate a random email const email = bru.interpolate('{{$randomEmail}}'); console.log('Random email:', email); // Generate multiple random values in one call const userInfo = bru.interpolate(` Name: {{$randomFullName}} Job: {{$randomJobTitle}} Email: {{$randomEmail}} `); console.log(userInfo); // Use with environment variables const greeting = bru.interpolate('Hello {{user}} from {{$randomCity}}'); The bru.interpolate() function allows you to embed random variables in strings and have them evaluated at runtime within scripts, just like they would be in request bodies or headers."},"title":"Random Values"},"/docs/scripting/response-query/":{"data":{"":"The res object that is available inside the post-response variables and scripts. contexts can be queried for data by invoking it like below.\nThink of it as lodash.get() on steroids\nres('order.total')","api#API":"","array-filtering--with-corresponding-filter-function#Array filtering [?] with corresponding filter function":"Example:\nres('..items[?].amount', i =\u003e i.amount \u003e 20)","array-indexing#Array indexing":"Example:\nres('..items[0].amount')","array-mapping--with-corresponding-mapper-function#Array mapping [?] with corresponding mapper function":"Example:\nres('..items..amount[?]', amt =\u003e amt + 10)","deep-navigation--double-dots#Deep navigation .. double dots":"Example:\nres('..items.amount')","examples#Examples":"const data = { customer: { address: { city: \"bangalore\" }, orders: [ { id: \"order-1\", items: [ { id: 1, amount: 10 }, { id: 2, amount: 20 } ] }, { id: \"order-2\", items: [ { id: 3, amount: 30 }, { id: 4, amount: 40 } ] } ] }, }; Query Output res(“customer.address.city”) bangalore res(“customer.orders.items.amount”) [10, 20, 30, 40] res(“customer.orders.items.amount[0]”) 10 res(\"..items.amount\") [10, 20, 30, 40] res(\"..amount\") [10, 20, 30, 40] res(\"..items.amount[0]\") 10 res(\"..items[0].amount\") 10 res(\"..items[5].amount\") undefined res(\"..id\") [“order-1”, 1, 2, “order-2”, 3, 4] res(“customer.orders.foo”) undefined res(\"..customer.foo\") undefined res(\"..address\") [{ city: “bangalore” }] res(\"..address[0]\") { city: “bangalore” }","standard-dot-notation#Standard dot notation":"Example:\nres('customer.orders.items.amount')"},"title":"Response Query"},"/docs/scripting/sync-requests/":{"data":{"":"You can make synchronous requests in your pre/post scripts. By synchronous, we mean that you can await a request in your scripting code.\nBelow is an inbuilt example of using axios library to\nconst axios = require(\"axios\"); const response = await axios.get(\"https://api.github.com/users/usebruno\"); bru.setVar(\"avatarUrl\", response.data.avatar_url);"},"title":"Synchronous Requests"},"/docs/scripting/variables/":{"data":{"":"The Variables tab allows you to manage variables at different stages of your request lifecycle. You can set and use variables:\nBefore the request (Pre Request) After receiving the response (Post Response) Variables are scoped within the request and cannot be accessed outside of it. This ensures clean separation between different requests.","post-response-vars#Post Response Vars":"In the Variables tab, select the Post Response option from the dropdown, you can write any valid JavaScript expression. The res object is available, allowing you to declaratively parse the response object and set variables, instead of writing scripts to do the same.\nFor parsing the response, you can checkout the response query that allows you to easily query your response.","pre-request-vars#Pre Request Vars":"In the Variables tab, select the Pre Request option from the dropdown, you can write any strings, numbers or any valid JavaScript literal."},"title":"Variables"},"/docs/sending-requests/":{"data":{"":"","http#HTTP":"Explore the following sections to send HTTP requests using Trayce:\nHTTP Overview Parameters Headers Body"},"title":"Sending Requests"},"/docs/sending-requests/graphql/":{"data":{"":"HTTP (Hypertext Transfer Protocol) is the foundational protocol that powers the World Wide Web, enabling communication between web browsers and servers. It operates as a request-response protocol where clients (like web browsers) send HTTP requests to servers, which then respond with the requested resources such as HTML pages, images, JSON, or data.\nHTTP is stateless, meaning each request is independent and doesn’t retain information from previous interactions, though mechanisms like cookies and sessions can maintain state when needed."},"title":"GraphQL"},"/docs/sending-requests/graphql/query/":{"data":{"":"GraphQL support has not yet been implemented in Trayce! Check the GitHub releases page for updates, or subscribe to version updates here."},"title":"GraphQL Query"},"/docs/sending-requests/graphql/variables/":{"data":{"":"GraphQL support has not yet been implemented in Trayce! Check the GitHub releases page for updates, or subscribe to version updates here."},"title":"GraphQL Variables"},"/docs/sending-requests/http/":{"data":{"":"HTTP (Hypertext Transfer Protocol) is the foundational protocol that powers the World Wide Web, enabling communication between web browsers and servers. It operates as a request-response protocol where clients (like web browsers) send HTTP requests to servers, which then respond with the requested resources such as HTML pages, images, json, or data.\nHTTP is stateless, meaning each request is independent and doesn’t retain information from previous interactions, though mechanisms like cookies and sessions can maintain state when needed."},"title":"HTTP"},"/docs/sending-requests/http/body/":{"data":{"":"The Body tab allows you to send specific data with your API requests. You can choose from various data formats, such as Form, Raw, and others, using the dropdown menu.","1-text-based-data#1. Text-Based Data":"Text-based data allows you to send data in its raw, unprocessed form in the body of an API request. It doesn’t require a predefined structure like key-value pairs or multi-part boundaries. Instead, you can send data exactly as it is, which is useful when dealing with structured data formats such as JSON, XML or plain text.\nNavigate to the Body tab. Select your preferred data format (i.e. JSON). Add appropriate data for your API request. Save and execute the request.","2-form-data#2. Form Data":"Multipart Form\nMultipart form data is used for sending files along with form data, allowing multiple parts with different content types in a single request. In multipart form data, each part of the request is separated by a boundary.\nNavigate to the Body tab. Select Multipart Form from dropdown. Click on Add File and upload your file. Save and execute the request. URL-Encoded Form\nURL-Encoded form data is commonly used for simple form submissions where data is sent as key-value pairs. Each key and value are separated by an equal sign (=), and multiple pairs are separated by an ampersand (\u0026).\nNavigate to the Body tab. Select Form URL Encoded from dropdown. Click on Add Param and add key-value pair. Save and execute the request.","3-file-data#3. File Data":"File data allows you to upload and send files directly in the body of your API request. This is commonly used for uploading documents, images, or any binary data to endpoints that accept file uploads. The file is sent as raw binary data in the request body.\nNavigate to the Body tab. Select File from dropdown. Click Browse to upload a file. Click the file’s radio button to select it to be sent Save and execute the request.","how-send-api-requests-with-a-body#How Send API Requests with a Body":"You can select the data type based on your API request requirements. For example, if you’re working with a request where you need to send specific details about a particular item, you’ll likely choose JSON as the data type and include the data in the body of the request."},"title":"Body"},"/docs/sending-requests/http/headers/":{"data":{"":"Request headers are key-value pairs sent along with an HTTP request to provide additional information to the server about the request. The request headers give the server more information about how to process the incoming request.\nDefault Headers: Default headers are predefined headers that are part of the HTTP specification.\nCustom Headers: Custom headers are headers that are user-defined and are not part of the official HTTP specification.","how-to-add-request-headers#How to Add Request Headers":"Create a request Navigate to the Headers tab Enter the Name of the header and its corresponding Value."},"title":"Headers"},"/docs/sending-requests/http/parameters/":{"data":{"":"Trayce enables you to send data with your HTTP requests. You can include both query and path parameters in the request and define their corresponding values.\nQuery Parameters Path Parameters","how-path-parameters-work#How Path Parameters Work":"Path parameters are embedded directly in the URL path. They are represented as placeholders preceded by a colon (:). When making the request, the placeholder is replaced with a dynamic value, which is part of the URL. Example:\nhttps://api.example.com/users/:id :id is a path parameter.","how-query-parameters-work#How Query Parameters Work":"Query parameters are appended to the end of the URL after a ? symbol Each parameter consists of a key-value pair If there are multiple query parameters, they are separated by an \u0026 symbol","how-to-add-path-parameters#How to Add Path Parameters":"Create a request Navigate to the Params tab Add the path parameter variable in the URL. e.g. /users/:user Enter the value in the path parameter section for the corresponding variable.","how-to-add-query-parameters#How to Add Query Parameters":"Create a request Navigate to the Params tab Enter the Name of the parameter and its corresponding Value You’ll notice that the values are appended to the URL, starting with a ?.","path-parameters#Path Parameters":"A path parameter is a dynamic value embedded directly in the URL path of an API request. It is used to specify particular resources or data points within an API endpoint.","query-parameters#Query Parameters":"Query parameters are a way to pass additional information to a server via the URL when making an HTTP request. They are commonly used in GET requests to filter, sort, or specify the data you’re asking for."},"title":"Parameters"},"/docs/variables/":{"data":{"":"Variables allow you to store dynamic values that can be reused across multiple API requests, environments, and workflows. This feature enhances flexibility, maintainability, and efficiency by enabling you to manage frequently changing data points such as tokens, environment-specific URLs, or user-defined values in one place.","debugging-variables-in-scripts#Debugging Variables in Scripts":"You can access and debug variables in the console using the following pattern:\nThe pattern follows bru.get[Type]Var(key) where:\n[Type] is the variable type (Runtime, Request, Folder, etc.) key is the variable name you want to access","example#Example:":"// Basic syntax: console.log(bru.get[Type]Var(key)) console.log(bru.getVar('myVar')) // Runtime variables","scripting-api#Scripting API":"Please see the Scripting API for more information on how to access variables in your scripts.","types#Types":"There are 6 types of variables you can create:\nGlobal Environments Variables Environment Variables Collection Variables Folder Variables Request Variables Runtime Variables Additionally, Process Environment Variables can be defined in an external environment configuration file:\nProcess Environment Variables","variable-data-type#Variable Data Type":"All variables are stored as strings. Trayce does not infer or change the data type of the variable based on the value you set.","variable-precedence-and-scope#Variable Precedence and Scope":"When a variable is accessed, the following precedence is used to determine which value is used:","variable-storage#Variable Storage":"Each variable has its own storage location either within your collection file or within the app’s memory. All storage is local."},"title":"Variables"},"/docs/variables/collection-variables/":{"data":{"":"Collection variables are variables that are scoped to a specific collection. They are useful for storing variables that are used across multiple requests in a collection.\nHow to Add a Collection Variable Go to Collection Settings Go to the Variables tab Add your variable name, value in the Pre Request Vars section Save your changes Using a Collection Variable You can use the {{varName}} syntax to use a collection variable in a request.","access-collection-variable-inside-scripts#Access Collection Variable inside scripts":"You can also use the bru.getCollectionVar() function to get the value of a runtime variable and use it inside your pre request scripts.\nlet namespace = bru.getCollectionVar(\"posts_path\");","how-to-add-a-collection-variable#How to Add a Collection Variable":"","using-a-collection-variable#Using a Collection Variable":""},"title":"Collection Variables"},"/docs/variables/environment-variables/":{"data":{"how-to-add-an-environment-variable#How to Add an Environment Variable":"Environment variables are variables that are scoped to an environment, such as local development or production. They are useful for storing variables that can be re-used across the collection that are different depending on the environment. An example would be the host url of the server you want to test.\nHow to Add an Environment Variable Go to environments (top right) and press configure. If there are no environments, you will be prompted to create one. Add your variable name and value for the specific environment. Save your changes. Select the environment from the dropdown:","using-an-environment-variable#Using an Environment Variable":"Just like other variables you can use the {{varName}} syntax to use an environment variable in a request. On the top-right, you can see which environment you are currently using and select a different one.","using-the-environment-directory#Using the ./environment Directory":"Environment variables are synced with the /environments directory inside your collection. You can also create and manage environments there.\nEach environment is saved in a .bru file, which looks like this:\nvars { host: http://localhost:8787 } vars:secret [ my_password ]"},"title":"Environment Variables"},"/docs/variables/folder-variables/":{"data":{"":"Folder variables are variables that are scoped to a specific folder. They are useful for storing variables that are used across multiple requests in a folder.\nHow to Add a Folder Variable Go to Folder Settings Go to Vars Tab Add your variable name, value in the Pre Request Vars section Save your changes Using a Folder Variable You can use the {{varName}} syntax to use a folder variable in a request.","access-folder-variable-inside-scripts#Access Folder Variable inside scripts":"You can also use the bru.getFolderVar() function to get the value of a folder variable and use it inside your scripts.\nlet bearerToken = bru.getFolderVar(\"username\");","how-to-add-a-folder-variable#How to Add a Folder Variable":"","using-a-folder-variable#Using a Folder Variable":""},"title":"Folder Variables"},"/docs/variables/global-environment-variables/":{"data":{"":"Global variables are stored in the application’s memory. You can access them by visiting the About section from Settings and navigating to the AppData path location. Global environment variables can be used across all collections and requests. Think of them as a global store accessible throughout the app.\nInstead of creating the same collection variable repeatedly in each collection, you can use global variables to store common values that need to be accessed across different collections. This eliminates the repetitive task of defining the same variables every time.","how-to-add-a-global-environment-variable#How to Add a Global Environment Variable":"Click the Global Environments icon (top right corner) and click Configure. Click New Environment. Click the edit icon next to the environments name, enter your name and hit enter. Add variables by typing their name and value: Your global environment variable is now created and can be accessed across your workspace.\nYou can click the secret checkbox to hide the values of variables while hovering over them.","how-to-use-global-environment-variables#How to use Global Environment Variables":"To use a global environment variable, reference it using the format {{var_name}} in any request or collection. These variables can be combined with other variables and used throughout your workspace, making them ideal for consistent value sharing."},"title":"Global Environment Variables"},"/docs/variables/process-environment-variables/":{"data":{"":"Process environment variables are used to store sensitive information, such as API keys, passwords, and other secret values. These values are stored in a .env file.\nYou must create the .env file in your local project directory (e.g., using VS Code) to store your process environment variables. Trayce cannot create or manage the .env file for you.","creating-a-process-environment-variables#Creating a Process Environment Variables":"To create process environment variables, you can add a .env file to the root of your collection. This file will store your secrets, which can then be accessed throughout the collection.","example#Example":"In your collection, the structure might look like this:\napi-folder customer-api emp-api details.bru lib.js .gitignore bruno.json package.json .env In the .env file, you would store a key-value pair, like this:\nkey = 1232abcd","using-the-process-environment-variables#Using the Process Environment Variables":"To access the values stored in the .env file, you can use the process.env global object. For example, if you want to retrieve the key value from your .env file, you would use:\nYou can use process.env. throughout your collection to securely manage and access your environment variables."},"title":"Process Environment Variables"},"/docs/variables/request-variables/":{"data":{"":"Request variables are variables that are scoped to a specific request. They are useful for storing variables that is used in a specific request.\nHow to Add a Request Variable Go to the Request Go to Vars Tab Add your variable name, value in the Pre Request Vars section Save your changes Using a Request Variable You can use the {{varName}} syntax to use a request variable in a request.","access-request-variable-inside-scripts#Access Request Variable inside scripts":"You can also use the bru.getRequestVar() function to get the value of a request variable and use it inside your scripts.\nlet source = bru.getRequestVar(\"source\"); let destination = bru.getRequestVar(\"destination\");","how-to-add-a-request-variable#How to Add a Request Variable":"","using-a-request-variable#Using a Request Variable":""},"title":"Request Variables"},"/docs/variables/runtime-variables/":{"data":{"":"Runtime variables are ephemeral variables that exist only during the runtime of the API client. These variables are scoped within a collection, meaning they are accessible to all requests within that collection. However, once the API client is closed or restarted, the values of these variables are lost. They are ideal for managing temporary data such as session tokens, dynamic parameters, or other values that are generated or updated during the execution of requests.","example#Example:":"Suppose you receive an authentication token as part of a response body and want to reuse it in subsequent requests. You can capture it using the bru.setVar() function in your post response script.\nbru.setVar(\"token\", res.body.token);","example-1#Example:":"If you’ve stored a token variable using bru.setVar(), you can use it in headers, query parameters, body, or URL of subsequent requests like this:\nAuthorization: Bearer {{token}} You can also use the bru.getVar() function to get the value of a runtime variable and use it inside your pre request scripts.\nconst token = bru.getVar(\"token\"); req.setHeader(\"Authorization\", `Bearer ${token}`);","example-2#Example:":"Consider the following script inside Trayce, which creates a runtime variable with a key and value pair. In this case, the key is hey and the value is Trayce.\nbru.setVar(\"hey\", \"Trayce\"); Once the request is executed, the runtime variable will be available for viewing. Click the eye icon in the top right corner to view them:","how-to-add-a-runtime-variable#How to Add a Runtime Variable":"To create a runtime variable, you can use the bru.setVar(name, value) function. This function allows you to store any value (e.g., tokens, response data, temporary user inputs) as a runtime variable.","using-a-runtime-variable#Using a Runtime Variable":"Once a runtime variable is created, you can use it in subsequent API requests by referencing it with the {{variableName}}syntax. The variable’s value will be dynamically injected into the request at runtime.","viewing-runtime-variables#Viewing Runtime Variables":"You can view all runtime variables by clicking on the Eye icon located in the top-right corner of the navigation bar\nThe request must be executed before you can view the runtime variables."},"title":"Runtime Variables"},"/docs/variables/variables-interpolation/":{"data":{"":"Variable interpolation allows you to use variables in your requests using the {{variableName}} syntax. Let’s explore how interpolation works with different data types.","api-authentication#API Authentication":"bru.setVar(\"authConfig\", { apiKey: \"your-api-key\", secret: \"your-secret\" }); // In request headers headers { \"X-API-Key\": \"{{authConfig.apiKey}}\", \"X-Secret\": \"{{authConfig.secret}}\" }","array-interpolation#Array Interpolation":"// Define your arrays const technologies = [\"REST\", \"GraphQL\", \"gRPC\"]; const settings = [ { port: 3000, env: \"dev\" }, { port: 8080, env: \"prod\" } ]; // Set arrays as variables bru.setVar(\"apiTypes\", technologies); bru.setVar(\"configs\", settings); // Using array elements in request { // Simple array access \"primaryAPI\": \"{{apiTypes[0]}}\", // \"REST\" \"alternativeAPI\": {{apiTypes}}, // Accessing object properties in arrays \"devPort\": {{configs[0].port}}, // 3000 \"prodEnv\": {{configs}}, // Using multiple array elements \"supported\": { \"apis\": [\"{{apiTypes[0]}}\", \"{{apiTypes[1]}}\"], } } // Interpolates to: // { // \"primaryAPI\": \"REST\", // \"alternativeAPI\": [ // \"REST\", // \"GraphQL\", // \"gRPC\" // ] // \"devPort\": 3000, // \"prodEnv\": [ // { // \"port\": 3000, // \"env\": \"dev\" // }, // { // \"port\": 8080, // \"env\": \"prod\" // } // ] // \"supported\": { // \"apis\": [\"REST\", \"GraphQL\"], // } // }","basic-interpolation#Basic Interpolation":"","booleans#Booleans":"// Setting a boolean variable bru.setVar(\"isActive\", true); // Using in request body { \"active\": {{isActive}} } // Interpolates to: { \"active\": true }","date-interpolation#Date Interpolation":"bru.setVar(\"timestamp\", new Date()); // Using in request { \"createdAt\": \"{{timestamp}}\" } // Interpolates to: // { // \"createdAt\": \"2025-04-23T13:57:56.341Z\" // }","dynamic-query-parameters#Dynamic Query Parameters":"bru.setVar(\"searchParams\", { limit: 10, offset: 0, filter: \"active\" }); // In URL GET http://api.example.com/users?limit={{searchParams.limit}}\u0026offset={{searchParams.offset}}\u0026filter={{searchParams.filter}}","numbers#Numbers":"// Setting a number variable bru.setVar(\"userId\", 123); // Using in request GET http://api.example.com/users/{{userId}} // Interpolates to: http://api.example.com/users/123","object-interpolation#Object Interpolation":"You can access object properties using dot notation. Here’s how to work with objects containing different data types:\n// Define your object with multiple data types const userProfile = { username: \"john_doe\", // string accountId: 12345, // number isVerified: true, // boolean preferences: { // nested object theme: \"dark\", notifications: true } }; // Set the object as a variable bru.setVar(\"user\", userProfile); // Using in request body { \"username\": \"{{user.username}}\", \"verified\": {{user.isVerified}}, \"preferences\": {{user.preferences}}, } // Interpolates to: // { // \"username\": \"john_doe\", // \"verified\": true, // \"preferences\": { // \"theme\": \"dark\", // \"notifications\": true // } // }","practical-examples#Practical Examples":"","request-body-with-mixed-types#Request Body with Mixed Types":"bru.setVar(\"product\", { name: \"Pro Edition\", price: 99.99, }); // In request body { \"productName\": \"{{product.name}}\", \"price\": {{product.price}}, \"firstFeature\": \"{{product.features[0]}}\", \"releaseDate\": \"{{product.metadata.released}}\" } Remember that variables set using bru.setVar() are available throughout your collection’s scope. Use them to make your requests more dynamic and maintainable.","strings#Strings":"// Setting a string variable bru.setVar(\"greeting\", \"Hello World\"); // Using in request GET http://api.example.com/{{greeting}} // Interpolates to: http://api.example.com/Hello World"},"title":"Variables Interpolation"}}